{"ast":null,"code":"var _jsxFileName = \"/Users/lucas/Documents/test_tech/src/contexts/notes.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllNotesContext = /*#__PURE__*/createContext(undefined);\nconst lastId = 0;\n\n// provider\nexport const AllNoteProvider = ({\n  children\n}) => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const addNote = newNote => {\n    setNotes(prevNotes => [...prevNotes, newNote]);\n  };\n  const contextValue = {\n    notes,\n    addNote\n  };\n  return /*#__PURE__*/_jsxDEV(AllNotesContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n// custom hook\n_s(AllNoteProvider, \"GQLmJKrKSWtt27ULSmYSMpXke/c=\");\n_c = AllNoteProvider;\nexport const useAllNotes = () => {\n  _s2();\n  const context = useContext(AllNotesContext);\n  if (!context) {\n    throw new Error(\"useAllNotes must be used within an AllNoteProvider\");\n  }\n  return context;\n};\n_s2(useAllNotes, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AllNoteProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AllNotesContext","undefined","lastId","AllNoteProvider","children","_s","notes","setNotes","addNote","newNote","prevNotes","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAllNotes","_s2","context","Error","$RefreshReg$"],"sources":["/Users/lucas/Documents/test_tech/src/contexts/notes.tsx"],"sourcesContent":["import React, { createContext, useContext, ReactNode, useState } from 'react';\nimport Note  from '../modules/Note';\n\n// context type\ntype AllNotesContextType = {\n  notes: Note[];\n  addNote: (newNote: Note) => void;\n};\n\nconst AllNotesContext = createContext<AllNotesContextType | undefined>(undefined);\nconst lastId = 0;\n\n// provider\nexport const AllNoteProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [notes, setNotes] = useState<Note[]>([]);\n\n  const addNote = (newNote: Note) => {\n    setNotes((prevNotes) => [...prevNotes, newNote]);\n  };\n\n  const contextValue: AllNotesContextType = {\n    notes,\n    addNote,\n  };\n\n  return (\n    <AllNotesContext.Provider value={contextValue}>\n      {children}\n    </AllNotesContext.Provider>\n  );\n};\n\n// custom hook\nexport const useAllNotes = (): AllNotesContextType => {\n  const context = useContext(AllNotesContext);\n\n  if (!context) {\n    throw new Error(\"useAllNotes must be used within an AllNoteProvider\");\n  }\n\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAaC,QAAQ,QAAQ,OAAO;;AAG7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,eAAe,gBAAGL,aAAa,CAAkCM,SAAS,CAAC;AACjF,MAAMC,MAAM,GAAG,CAAC;;AAEhB;AACA,OAAO,MAAMC,eAAkD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC;EAE9C,MAAMW,OAAO,GAAIC,OAAa,IAAK;IACjCF,QAAQ,CAAEG,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAED,OAAO,CAAC,CAAC;EAClD,CAAC;EAED,MAAME,YAAiC,GAAG;IACxCL,KAAK;IACLE;EACF,CAAC;EAED,oBACET,OAAA,CAACC,eAAe,CAACY,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAP,QAAA,EAC3CA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;;AAED;AAAAZ,EAAA,CAnBaF,eAAkD;AAAAe,EAAA,GAAlDf,eAAkD;AAoB/D,OAAO,MAAMgB,WAAW,GAAGA,CAAA,KAA2B;EAAAC,GAAA;EACpD,MAAMC,OAAO,GAAGzB,UAAU,CAACI,eAAe,CAAC;EAE3C,IAAI,CAACqB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EAEA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CARWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}